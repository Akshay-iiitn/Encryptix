function minimax(board, depth, isMaximizing, alpha, beta) {
    let score = evaluate(board);

    // Terminal node evaluation
    if (score === 10) return score - depth;
    if (score === -10) return score + depth;
    if (board.every(cell => cell !== '')) return 0;

    if (isMaximizing) {
        let best = -Infinity;
        for (let i = 0; i < board.length; i++) {
            if (board[i] === '') {
                board[i] = currentPlayer;
                best = Math.max(best, minimax(board, depth + 1, false, alpha, beta));
                board[i] = '';
                alpha = Math.max(alpha, best);
                if (beta <= alpha) break;
            }
        }
        return best;
    } else {
        let best = Infinity;
        for (let i = 0; i < board.length; i++) {
            if (board[i] === '') {
                board[i] = currentPlayer === 'X' ? 'O' : 'X';
                best = Math.min(best, minimax(board, depth + 1, true, alpha, beta));
                board[i] = '';
                beta = Math.min(beta, best);
                if (beta <= alpha) break;
            }
        }
        return best;
    }
}

function evaluate(board) {
    for (let i = 0; i < winningConditions.length; i++) {
        const [a, b, c] = winningConditions[i];
        if (board[a] === board[b] && board[b] === board[c]) {
            if (board[a] === currentPlayer) return 10;
            else if (board[a] === currentPlayer === 'X' ? 'O' : 'X') return -10;
        }
    }
    return 0;
}
